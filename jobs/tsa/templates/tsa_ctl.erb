#!/bin/bash

set -e

<%
  require "cgi"
  require "shellwords"

  def esc(x)
    Shellwords.shellescape(x)
  end

  if !spec.address or spec.address == ""
    peer_ip = "127.0.0.1"
  else
    peer_ip = spec.address
  end

  atc_urls = []
  if_link("atc") do |atc|
    atc.instances.each do |instance|
      atc_urls << "http://#{instance.address}:#{atc.p("bind_port")}"
    end
  end

  atc_urls = p("atc.urls") if atc_urls.empty?

  team_authorized_keys = {}
  p("team_authorized_keys").each do |a|
    team = a["team"]
    team_authorized_keys[team] ||= []
    team_authorized_keys[team] << a["ssh_key"]
  end
%>

RUN_DIR=/var/vcap/sys/run/tsa
LOG_DIR=/var/vcap/sys/log/tsa
PIDFILE=$RUN_DIR/tsa.pid

source /var/vcap/packages/pid_utils/pid_utils.sh

case $1 in

  start)
    pid_guard $PIDFILE "tsa"

    mkdir -p $RUN_DIR
    chown -R vcap:vcap $RUN_DIR

    mkdir -p $LOG_DIR
    chown -R vcap:vcap $LOG_DIR

    echo $$ > /var/vcap/sys/run/tsa/tsa.pid

    HOST_KEY=/var/vcap/jobs/tsa/config/host_key
    SIGNING_KEY=/var/vcap/jobs/tsa/config/token_signing_key

    for key in $HOST_KEY $SIGNING_KEY; do
      chown vcap:vcap $key
      chmod 0400 $key
    done

    {
      cat <<EOF
<%= p("authorized_keys").join("\n") %>
EOF
    } > /var/vcap/jobs/tsa/config/authorized_keys

<% team_authorized_keys.each do |team, keys| %>
    {
      cat <<EOF
<%= keys.join("\n") %>
EOF
    } > /var/vcap/jobs/tsa/config/<%= team %>_authorized_keys
 <% end %>

    exec chpst -u vcap:vcap /var/vcap/packages/tsa/bin/tsa \
      <% atc_urls.each do |atc_url| %> \
      --atc-url <%= atc_url %> \
      <% end %> \
      --peer-ip <%= peer_ip %> \
      --bind-port <%= p("bind_port") %> \
      --host-key $HOST_KEY \
      --session-signing-key $SIGNING_KEY \
      --authorized-keys /var/vcap/jobs/tsa/config/authorized_keys \
      <% team_authorized_keys.each do |team, keys| %> \
      --team-authorized-keys <%= team %>=/var/vcap/jobs/tsa/config/<%= team %>_authorized_keys \
       <% end %> \
      --heartbeat-interval <%= p("heartbeat_interval") %> \
      --log-level <%= p("log_level") %> \
      --yeller-api-key <%= esc(p("yeller.api_key")) %> \
      --yeller-environment <%= esc(p("yeller.environment_name")) %> \
      1>>$LOG_DIR/tsa.stdout.log \
      2>>$LOG_DIR/tsa.stderr.log

    ;;

  stop)
    kill_and_wait $PIDFILE

    ;;

  *)
    echo "Usage: $0 {start|stop}"

    ;;

esac
